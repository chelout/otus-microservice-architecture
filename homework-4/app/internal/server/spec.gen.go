// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWW4/jNBT+K9aBN0KT6cwskKfdpYso4iaWfYI+uPFp4tnENr50p6ry39Gxk17DDEI8",
	"jCq1yal9Lt/FyR4q3RmtUHkH5R5c1WDH4+U7a7WlC2O1QeslxnClBdLvRtuOeyhBKn87hwz8zmC6xRot",
	"9Bl06Byv4+rhT+etVDX0fQYW/wrSooDyj5TzuH51SKbXD1h5yvXB4UQz2HHZnnWTItllwQw20jr/M++m",
	"2slAisuZXt1NztTyJ7KYRqtzcFJkop3g0KohT8cff0RV+wbK+f2rbAKsCzgoJNVGJz6U55U/QSOS6KVS",
	"8qPevq4pOKt0R1UFuspK46VWUMLvjXRMOuZkZ1pkVStRefbm1+WfilqWvqWihDx7j3YrK5pki9al7Tez",
	"YlZQVm1QcSOhhNsYysBw30SC8jDypl3scaKDiiumVbtja2RCK2TrHfMNslbXNQomFaMkM4iFLKetSwEl",
	"fGuRe4zCSHJC599qsRtRQRUrcmNaWcVt+YOjsnvAR04jJ8nHyy/HRl3oOm53UMK7tIhm5m3AU4TX6PyD",
	"btRroTFie6Yv+EE3hOBRK7DQlGfQB3zx1U1RzIvitrgjtI5aAEoqNN5//U1iOfmRSn9ucQMlfJYfDZsP",
	"bs0jBnH9ObwJIRHxY4N4Tp3nbcBoRWe0cgkOgRse2gmuXKgqdG4TWnbgIYrziFiqF8uRgHjtyN3xdkUr",
	"oxryPX0vRZ9KtOjxuliKO8aZk6puU0625g4F0yrKY7lgLhC3KK6ksYjbD9I4GW9e3F1Xi8lTSZFscsDg",
	"GSH9O37SUTpBUFD4aLAijnBYc4VbBjVO0PEb+mAVIXQOzQGx5SJjchOhSvNpdExpzxq+RcYjmczrw4Ir",
	"EL+TShCEb3dLcQ1j8b+h80/qjV2PVV8gLYZb3qFHS+FLepYLpjcjrpIidCZCBoPRkweu3Hjq+GefRv0q",
	"AxMmtPHBiNGH7JP0DYtn+FOGSTte5FkaWonPHqZ38/j5L4dmPy3tCS2GCNLLOyHizGi300ocoI+P8Ehv",
	"sAR7470p83xgbyZ0x6XKuZH59iaHPrtM8/4Tr2u034c1vSGwN8Fr9pOuPtIrymlOV+b5VlqfGpq5tK0J",
	"a+I21z64+/v4HHD58AKxOgx0WfOXUaOO8bUOfvTTiYegX/V/BwAA//8ZEc6kxQoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
